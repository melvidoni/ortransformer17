<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2007

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce 2007 Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:xs="http://www.w3.org/2001/XMLSchema" 
	xmlns:fn="http://www.w3.org/2005/xpath-functions" exclude-result-prefixes="fn xs">
	
	<xsl:output method="xml" encoding="UTF-8" indent="yes"/>
	<xsl:param name="SQL2003Metamodel_data1" select="''"/>
	<xsl:param name="SQL2003Metamodel_data2" select="''"/>
	<xsl:param name="SQL2003Metamodel_schema_1" select="''" />
	
	<xsl:template match="/SQLSchema">
		<SQLSchema>
			<xsl:attribute name="xsi:noNamespaceSchemaLocation" separator=" ">
				<xsl:sequence select="$SQL2003Metamodel_schema_1" />
			</xsl:attribute>
			<SchemaObject>
				<xsl:for-each select="StructuredType">
					<xsl:variable name="Vvar3_StructuredType" select="."/>
					<TypedTable>
						<xsl:for-each select="@name">
							<xsl:variable name="Vvar5_name" select="xs:string( . )"/>
							<xsl:variable name="Vvar6_CONST" select="''"/>
							<xsl:variable name="Vvar7_RESULTOF_concat" select="fn:concat($Vvar5_name, $Vvar6_CONST)"/>
							<xsl:for-each select="$Vvar3_StructuredType/@uninstantiable">
								<xsl:variable name="Vvar9_uninstantiable" select="for $i in fn:string( . ) return if ($i castable as xs:boolean ) then xs:boolean($i) else if ( $i castable as xs:double ) then fn:boolean( fn:number($i) ) else fn:boolean($i )"/>
								<xsl:variable name="Vvar10_CONST" select="'false'"/>
								<xsl:variable name="Vvar11_RESULTOF_equal" select="xs:string( $Vvar9_uninstantiable ) = xs:string( $Vvar10_CONST )"/>
								<xsl:for-each select="doc($SQL2003Metamodel_data1)/SQLSchema">
									<xsl:for-each select="StructuredType">
														<xsl:for-each select="@name">
															<xsl:variable name="Vvar19_name" select="xs:string( . )"/>
															<xsl:variable name="Vvar20_RESULTOF_notequal" select="xs:string( $Vvar5_name ) != xs:string( $Vvar19_name )"/>
															<xsl:for-each select="$Vvar3_StructuredType/@supertype">
																<xsl:variable name="Vvar22_supertype" select="xs:string( . )"/>
																<xsl:variable name="Vvar23_CONST" select="''"/>
																<xsl:variable name="Vvar24_RESULTOF_equal" select="xs:string( $Vvar22_supertype ) = xs:string( $Vvar23_CONST )"/>
																<xsl:variable name="Vvar25_RESULTOF_logicaland_PART1" select="(if (fn:string($Vvar11_RESULTOF_equal) castable as xs:boolean ) then xs:boolean(fn:string($Vvar11_RESULTOF_equal)) else if ( fn:string($Vvar11_RESULTOF_equal) castable as xs:double ) then fn:boolean( fn:number( fn:string($Vvar11_RESULTOF_equal))) else fn:boolean( fn:string($Vvar11_RESULTOF_equal))) and (if (fn:string($Vvar20_RESULTOF_notequal) castable as xs:boolean ) then xs:boolean(fn:string($Vvar20_RESULTOF_notequal)) else if ( fn:string($Vvar20_RESULTOF_notequal) castable as xs:double ) then fn:boolean( fn:number( fn:string($Vvar20_RESULTOF_notequal))) else fn:boolean( fn:string($Vvar20_RESULTOF_notequal)))"/>
																<xsl:variable name="Vvar25_RESULTOF_logicaland" select="(if (fn:string($Vvar25_RESULTOF_logicaland_PART1) castable as xs:boolean ) then xs:boolean(fn:string($Vvar25_RESULTOF_logicaland_PART1)) else if ( fn:string($Vvar25_RESULTOF_logicaland_PART1) castable as xs:double ) then fn:boolean( fn:number( fn:string($Vvar25_RESULTOF_logicaland_PART1))) else fn:boolean( fn:string($Vvar25_RESULTOF_logicaland_PART1))) and (if (fn:string($Vvar24_RESULTOF_equal) castable as xs:boolean ) then xs:boolean(fn:string($Vvar24_RESULTOF_equal)) else if ( fn:string($Vvar24_RESULTOF_equal) castable as xs:double ) then fn:boolean( fn:number( fn:string($Vvar24_RESULTOF_equal))) else fn:boolean( fn:string($Vvar24_RESULTOF_equal)))"/>
																<xsl:if test="string($Vvar25_RESULTOF_logicaland)='true'">
																	<xsl:attribute name="name">
																		<xsl:value-of select="$Vvar7_RESULTOF_concat"/>
																	</xsl:attribute>
																</xsl:if>
															</xsl:for-each>
														</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
						<StructuredType>
							<xsl:for-each select="@name">
								<xsl:variable name="Vvar27_name" select="xs:string( . )"/>
								<xsl:for-each select="$Vvar3_StructuredType/@uninstantiable">
									<xsl:variable name="Vvar29_uninstantiable" select="for $i in fn:string( . ) return if ($i castable as xs:boolean ) then xs:boolean($i) else if ( $i castable as xs:double ) then fn:boolean( fn:number($i) ) else fn:boolean($i )"/>
									<xsl:variable name="Vvar30_CONST" select="'false'"/>
									<xsl:variable name="Vvar31_RESULTOF_equal" select="xs:string( $Vvar29_uninstantiable ) = xs:string( $Vvar30_CONST )"/>
									<xsl:for-each select="doc($SQL2003Metamodel_data2)/SQLSchema">
										<xsl:for-each select="StructuredType">
											<xsl:for-each select="Attribute">
												<xsl:for-each select="Type">
													<xsl:for-each select="Arrangement">
														<xsl:for-each select="StructuredType">
															<xsl:for-each select="@name">
																<xsl:variable name="Vvar39_name" select="xs:string( . )"/>
																<xsl:variable name="Vvar40_RESULTOF_notequal" select="xs:string( $Vvar27_name ) != xs:string( $Vvar39_name )"/>
																<xsl:for-each select="$Vvar3_StructuredType/@supertype">
																	<xsl:variable name="Vvar42_supertype" select="xs:string( . )"/>
																	<xsl:variable name="Vvar43_CONST" select="''"/>
																	<xsl:variable name="Vvar44_RESULTOF_equal" select="xs:string( $Vvar42_supertype ) = xs:string( $Vvar43_CONST )"/>
																	<xsl:variable name="Vvar45_RESULTOF_logicaland_PART1" select="(if (fn:string($Vvar31_RESULTOF_equal) castable as xs:boolean ) then xs:boolean(fn:string($Vvar31_RESULTOF_equal)) else if ( fn:string($Vvar31_RESULTOF_equal) castable as xs:double ) then fn:boolean( fn:number( fn:string($Vvar31_RESULTOF_equal))) else fn:boolean( fn:string($Vvar31_RESULTOF_equal))) and (if (fn:string($Vvar40_RESULTOF_notequal) castable as xs:boolean ) then xs:boolean(fn:string($Vvar40_RESULTOF_notequal)) else if ( fn:string($Vvar40_RESULTOF_notequal) castable as xs:double ) then fn:boolean( fn:number( fn:string($Vvar40_RESULTOF_notequal))) else fn:boolean( fn:string($Vvar40_RESULTOF_notequal)))"/>
																	<xsl:variable name="Vvar45_RESULTOF_logicaland" select="(if (fn:string($Vvar45_RESULTOF_logicaland_PART1) castable as xs:boolean ) then xs:boolean(fn:string($Vvar45_RESULTOF_logicaland_PART1)) else if ( fn:string($Vvar45_RESULTOF_logicaland_PART1) castable as xs:double ) then fn:boolean( fn:number( fn:string($Vvar45_RESULTOF_logicaland_PART1))) else fn:boolean( fn:string($Vvar45_RESULTOF_logicaland_PART1))) and (if (fn:string($Vvar44_RESULTOF_equal) castable as xs:boolean ) then xs:boolean(fn:string($Vvar44_RESULTOF_equal)) else if ( fn:string($Vvar44_RESULTOF_equal) castable as xs:double ) then fn:boolean( fn:number( fn:string($Vvar44_RESULTOF_equal))) else fn:boolean( fn:string($Vvar44_RESULTOF_equal)))"/>
																	<xsl:if test="string($Vvar45_RESULTOF_logicaland)='true'">
																		<xsl:attribute name="nombre">
																			<xsl:value-of select="$Vvar27_name"/>
																		</xsl:attribute>
																	</xsl:if>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</StructuredType>
					</TypedTable>
				</xsl:for-each>
			</SchemaObject>
		</SQLSchema>
	</xsl:template>
</xsl:stylesheet>
